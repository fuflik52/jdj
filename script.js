// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
const messagesContainer = document.getElementById('messages');
const messageInput = document.getElementById('message-input');
const sendButton = document.getElementById('send-button');
const contactNameInput = document.getElementById('contact-name-input');
const statusTypeSelect = document.getElementById('status-type');
const contactNameDisplay = document.getElementById('contact-name');
const statusDisplay = document.getElementById('status');
const presets = document.querySelectorAll('.preset');
const sendAsMe = document.getElementById('send-as-me');
const sendAsContact = document.getElementById('send-as-contact');
const fontSizeSelect = document.getElementById('font-size');
const profilePicInput = document.getElementById('profile-pic-url');
const profilePicDisplay = document.querySelector('#profile-pic');
const themeToggle = document.getElementById('theme-toggle');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let isTyping = false;
let sendingAsMe = true;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
function updateStatusBarTime() {
    const now = new Date();
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    document.querySelector('.status-bar .time').textContent = `${hours}:${minutes}`;
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(updateStatusBarTime, 60000);
updateStatusBarTime();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(type) {
    const now = new Date();
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    const oldIndicator = statusDisplay.querySelector('.status-indicator');
    if (oldIndicator) {
        oldIndicator.remove();
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    const indicator = document.createElement('span');
    indicator.className = `status-indicator ${type}`;

    switch (type) {
        case 'online':
            statusDisplay.textContent = '–≤ —Å–µ—Ç–∏';
            statusDisplay.insertBefore(indicator, statusDisplay.firstChild);
            break;
        case 'recently':
            statusDisplay.textContent = '–±—ã–ª(–∞) –Ω–µ–¥–∞–≤–Ω–æ';
            statusDisplay.insertBefore(indicator, statusDisplay.firstChild);
            break;
        case 'last-seen':
            statusDisplay.textContent = `–±—ã–ª(–∞) –≤ —Å–µ—Ç–∏ –≤ ${hours}:${minutes}`;
            statusDisplay.insertBefore(indicator, statusDisplay.firstChild);
            break;
        case 'typing':
            if (!isTyping) {
                isTyping = true;
                statusDisplay.textContent = '–ø–µ—á–∞—Ç–∞–µ—Ç';
                indicator.style.animation = 'pulse 1.5s infinite';
                statusDisplay.insertBefore(indicator, statusDisplay.firstChild);
                setTimeout(() => {
                    isTyping = false;
                    updateStatus(statusTypeSelect.value);
                }, 3000);
            }
            break;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function addMessage(text, isSent = true) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isSent ? 'sent' : 'received'}`;
    
    const messageText = document.createElement('div');
    messageText.className = 'text';
    messageText.textContent = text;
    
    const messageTime = document.createElement('div');
    messageTime.className = 'time';
    const now = new Date();
    messageTime.textContent = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
    
    messageDiv.appendChild(messageText);
    messageDiv.appendChild(messageTime);
    messagesContainer.appendChild(messageDiv);
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendMessage() {
    const text = messageInput.value.trim();
    if (text) {
        addMessage(text, sendingAsMe);
        messageInput.value = '';
        
        // –ï—Å–ª–∏ –ø–∏—à–µ–º –æ—Ç —Å–µ–±—è, –∏–Ω–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if (sendingAsMe && Math.random() > 0.5) {
            setTimeout(() => {
                updateStatus('typing');
                
                const responses = [
                    "–•–æ—Ä–æ—à–æ, –ø–æ–Ω—è–ª üëç",
                    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ...",
                    "–î–∞–≤–∞–π –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞?",
                    "–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?",
                    "–°–æ–≥–ª–∞—Å–µ–Ω —Å —Ç–æ–±–æ–π!",
                    "–ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å ü§î"
                ];
                const randomResponse = responses[Math.floor(Math.random() * responses.length)];
                
                setTimeout(() => {
                    addMessage(randomResponse, false);
                }, 3000);
            }, Math.random() * 1000 + 500);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
sendButton.addEventListener('click', sendMessage);
messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è
contactNameInput.addEventListener('input', () => {
    contactNameDisplay.textContent = contactNameInput.value;
});

statusTypeSelect.addEventListener('change', (e) => {
    updateStatus(e.target.value);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
profilePicInput.addEventListener('input', () => {
    profilePicDisplay.src = profilePicInput.value;
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö —Ñ–æ–Ω–æ–≤
presets.forEach(preset => {
    preset.addEventListener('click', () => {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
        presets.forEach(p => p.classList.remove('active'));
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–µ—Å–µ—Ç—É
        preset.classList.add('active');
        // –ü–æ–ª—É—á–∞–µ–º background –∏–∑ —Å—Ç–∏–ª–µ–π –ø—Ä–µ—Å–µ—Ç–∞
        const background = window.getComputedStyle(preset).background;
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ–Ω –∫ –æ–±–ª–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫—É
        messagesContainer.style.background = background;
        document.querySelector('.chat-header').style.background = background;
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
sendAsMe.addEventListener('click', () => {
    sendingAsMe = true;
    sendAsMe.classList.add('active');
    sendAsContact.classList.remove('active');
});

sendAsContact.addEventListener('click', () => {
    sendingAsMe = false;
    sendAsContact.classList.add('active');
    sendAsMe.classList.remove('active');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
fontSizeSelect.addEventListener('change', (e) => {
    const sizes = {
        small: '12px',
        medium: '14px',
        large: '16px'
    };
    document.documentElement.style.setProperty('--message-font-size', sizes[e.target.value]);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
function toggleTheme() {
    const root = document.documentElement;
    const isDark = !root.hasAttribute('data-theme') || root.getAttribute('data-theme') === 'dark';
    
    if (isDark) {
        root.setAttribute('data-theme', 'light');
        themeToggle.querySelector('.material-icons').textContent = 'light_mode';
    } else {
        root.removeAttribute('data-theme');
        themeToggle.querySelector('.material-icons').textContent = 'dark_mode';
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Ç–µ–º—ã
themeToggle.addEventListener('click', toggleTheme);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
async function takeScreenshot() {
    try {
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç messenger
        const messenger = document.querySelector('.phone-frame');
        
        // –°–æ–∑–¥–∞–µ–º canvas –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é html2canvas
        const canvas = await html2canvas(messenger, {
            backgroundColor: null,
            scale: 2, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            logging: false,
        });

        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const link = document.createElement('a');
        link.download = 'messenger-screenshot.png';
        link.href = canvas.toDataURL('image/png');
        link.click();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', error);
        alert('–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É html2canvas. –î–æ–±–∞–≤—å—Ç–µ <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script> –≤ –≤–∞—à HTML —Ñ–∞–π–ª.');
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
document.getElementById('screenshot-button').addEventListener('click', takeScreenshot);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
updateStatus('online');
